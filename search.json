[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Using Quarto and RStudio to build Data fellowship module materials",
    "section": "",
    "text": "Starting Point\nThese resources are intended to help us build and maintain materials and modules for the Data Fellowship training materials. These can also serve as a useful resource when wanting to use Quarto and GitHub pages for other aspects of our work. Therefore these resources will continue to grow and evolve with us - send suggestions for content or improvements through the issues tab on the GitHub Repo.",
    "crumbs": [
      "Starting Point"
    ]
  },
  {
    "objectID": "index.html#system-requirements",
    "href": "index.html#system-requirements",
    "title": "Using Quarto and RStudio to build Data fellowship module materials",
    "section": "⚠ System Requirements ⚠",
    "text": "⚠ System Requirements ⚠\nBefore you can start using Quarto to build out webpages or reports you need to ensure the following are installed on your computer\n\nR - https://www.r-project.org/\nRstudio - https://posit.co/download/rstudio-desktop/\nQuarto - https://quarto.org/docs/download/\nGit - https://git-scm.com/downloads\n\nEnsure you have a GitHub profile and are a member of PATH-Global-Health organization\nIf you haven’t installe these packages before ensure the usethis gh renv and quarto packages are installed by typing this in the RStudio console:\ninstall.packages(c(\"usethis\", \"gh\", \"renv\", \"quarto\", \"gitcreds\"))\n\nConfigure Git with RStudio\nAfter installing Git and setting up a GitHub account, the next step is to configure Git in RStudio. If you’ve linked your GitHub account to R already then skip ahead to What stage are you building from?\n\nOpen RStudio.\nConfigure Git in RStudio:\n\nGo to Tools &gt; Global Options.\nIn the left-hand sidebar, click Git/SVN.\nMake sure the path to the Git executable is correct (this should automatically detect where Git was installed). For Windows, it might look something like C:/Program Files/Git/bin/git.exe.\nClick Ok\n\nWe want Git to know who we are so it can associate changes with you. Enter the following code in your console and replace the user name and email to those linked to your github account\n\nusethis::use_git_config(user.name=\"Jane Doe\", user.email=\"jane@example.org\")",
    "crumbs": [
      "Starting Point"
    ]
  },
  {
    "objectID": "index.html#linking-to-github",
    "href": "index.html#linking-to-github",
    "title": "Using Quarto and RStudio to build Data fellowship module materials",
    "section": "Linking to GitHub",
    "text": "Linking to GitHub\nWhen its time to send our files to GitHub, we need GitHub to know who we are and that we have permission to write to our repositories. We can establish this authorisation through either a personal access token or a SSH key.\nWe can generate a PAT through GitHub directly through https://github.com/settings/tokens and click “Generate token”. Look over the scopes; I highly recommend selecting repo, user, and workflow. Copy the generated PAT to your clipboard. Or leave that browser window open and available for a little while, so you can come back to copy the PAT.\nAnother option is to create this directly in R using:\nusethis::create_github_token()\nRecommended scopes will be pre-selected if you used create_github_token().\nNow in R call, gitcreds::gitcreds_set() to get a prompt where you can paste your PAT:\n&gt; gitcreds::gitcreds_set()\n\n? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n-&gt; Adding new credentials...\n-&gt; Removing credentials from cache...\n-&gt; Done.\nYou should be able to work with GitHub now, i.e. push and pull!",
    "crumbs": [
      "Starting Point"
    ]
  },
  {
    "objectID": "index.html#sec-stage",
    "href": "index.html#sec-stage",
    "title": "Using Quarto and RStudio to build Data fellowship module materials",
    "section": "What stage are you building from?",
    "text": "What stage are you building from?\nBefore getting started we need to understand from what point we are building resources from - the following starting points cover the most common starting points we tend to find ourselves in\n\n\n\nStarting Point\nDescription\n\n\n\n\nBuilding from scratch\nStart here if you want to learn about setting up a completly new resource and with tips and steps about using GitHub for the first time too\n\n\nBuilding from an existing GitHub Repository\nStart here if you are collaborating on resources and want to add additional materials to an already existing module",
    "crumbs": [
      "Starting Point"
    ]
  },
  {
    "objectID": "building-from-scratch.html",
    "href": "building-from-scratch.html",
    "title": "1  Building From Scratch",
    "section": "",
    "text": "1.1 Step 1: Set up new Quarto Book Project in RStudio\nWe suggest using the Quarto Book format for hosting training materials - there are several other Quarto output styles that you can work with but this what has worked well for this style of content delivery.\nRStudio will open up your new project. The Quarto Book project structure will include:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-1-set-up-new-quarto-book-project-in-rstudio",
    "href": "building-from-scratch.html#step-1-set-up-new-quarto-book-project-in-rstudio",
    "title": "1  Building From Scratch",
    "section": "",
    "text": "Open RStudio.\nGo to the menu: File → New Project... → New Directory → Quarto Book.\nName the project and select the location where you want to save the project files on your computer. (I like to use a folder called github and all my repos exist in separate folders but pick what works for you!)\nEnsure the checkbox for Create a Git repository is selected (this initializes Git locally in the project).\nAnd also tick the checkbox for use renv with this project. This will create a local environment for the project and store all your package dependencies in an renv.lock file, this is an important aspect for hosting our site on gh-pages later on.\nClick Create Project.\n\n\n\n_quarto.yml: A configuration file where you can define the book’s structure, theme, output format, and other settings.\nindex.qmd: The landing page or introduction to the book. This file can serve as the cover page with a description of your project.\nqmd files for chapters: A few example .qmd files will be provided as placeholders for different chapters, which you can edit or replace with your content.\nAn renv folder: This directory contains your project-specific package library, and an renv.lock file will be created to lock down package versions and dependencies, ensuring the project remains reproducible and code can be executed on publishing to our online portal.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-2-stage-initial-commit-to-github",
    "href": "building-from-scratch.html#step-2-stage-initial-commit-to-github",
    "title": "1  Building From Scratch",
    "section": "1.2 Step 2: Stage initial commit to GitHub",
    "text": "1.2 Step 2: Stage initial commit to GitHub\nBefore linking this project to GitHub, we need to make sure the initial project files are committed to the local Git repository.\n\nHead to the Terminal tab next to the console.\nIn the terminal, check which files are ready to be staged using:\n\n    git status\n\nThis will show the files that have been modified or are new and need to be added to the repository. It will also tell us which branch we are working on in brackets. If this is the master branch lets change it to be called main.\n\ngit branch -m master main \n\nTo add all files to the staging area (the files you want to include in your commit - here this will just be our default Quarto Book Project files which is okay, run:\n\ngit add . \n\nThe . adds all the files in the current directory\nAfter staging the files, you’ll need to commit them. The commit message should describe what changes or additions you’re committing.To commit the changes, use: The -m flag allows you to add a message in quotes (\" \") describing the commit.\n\ngit commit -m \"Initial commit for Quarto website\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-3-push-the-local-project-to-github-using-usethisuse_github",
    "href": "building-from-scratch.html#step-3-push-the-local-project-to-github-using-usethisuse_github",
    "title": "1  Building From Scratch",
    "section": "1.3 Step 3 Push the local project to GitHub using usethis::use_github()",
    "text": "1.3 Step 3 Push the local project to GitHub using usethis::use_github()\nWe now want to link our local repository to GitHub and specially we want it to be part of the PATH-Global-Health GitHub organisation. We can use the following code to do this, run this in your console:\nusethis::use_github(\norganisation = \"PATH-Global-Health\", \nvisibility = \"public\"\n) \nThis command will:\n\nCreate a new GitHub repository.\nLink your local project to this repository.\nPush the project files to GitHub.\n\nThis should then open up the repository automatically in you browser.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-4-setting-up-gh-pages",
    "href": "building-from-scratch.html#step-4-setting-up-gh-pages",
    "title": "1  Building From Scratch",
    "section": "1.4 Step 4: Setting up gh-pages",
    "text": "1.4 Step 4: Setting up gh-pages\nOnce our repository is on GitHub, we can configure the GitHub Pages site - which is where our module resources will be hosted. Use the usethis::use_github_pages() function to set the publishing branch for GitHub Pages.\nTo publish from the gh-pages branch, run:\nusethis::use_github_pages(branch = \"gh-pages\")\nIf we head to our GitHub repository online we want to add some details to the repo page:\nHead back to the &lt;&gt; Code tab and in the About section on the top right open the settings wheel ⚙️ - Under Website check the box next to: [x] “Use your GitHub Pages website” as shown in the image below.\n\nIn addition we can add a short description in this section as in the above image e.g. “MACEPA Data Fellows materials for the [insert module title]”.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#sec-gh-action",
    "href": "building-from-scratch.html#sec-gh-action",
    "title": "1  Building From Scratch",
    "section": "1.5 Step 5: Automate Deployment with GitHub Actions",
    "text": "1.5 Step 5: Automate Deployment with GitHub Actions\nThis is something I’ve found works best for me and my workstyle when creating these modules. Instead of ever rendering my work locally and then publishing this to GitHub I include a GitHub Action command so that when I commit and push changes to the repository GitHub will automatically render the new outputs to the gh-pages site.\nManually building and deploying our project every time we make a change can be time-consuming and prone to error. So by configuring GitHub Actions, we can automate the entire publishing process. Whenever we push changes to the repository (e.g., updated content, code adjustments), GitHub Actions will automatically trigger the workflow to build and deploy our site. Which saves us time and reduces manual effort. This also helps ensure that everyone is working on the most recent version of the materials, with automatic deployment occurring in the background.\n\n1.5.1 Set up\nMore detials on setting up GitHub actions can be found here: https://quarto.org/docs/publishing/github-pages.html.\n\nIn your Quarto project directory, create a folder called .github/worflows\nInside .github/workflows/, create a file called quarto-publish.yml - You do this from within RStudio by heading to the files pane and into the workflows folder → new blank file → Text file and this opens up in R studio and then save this as quarto-publish.yml\nAdd the following content to the quarto-publish.yml\n\n\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Install R\n        uses: r-lib/actions/setup-r@v2\n        with:\n          r-version: '4.2.0'\n\n      - name: Install R Dependencies\n        uses: r-lib/actions/setup-renv@v2\n        with:\n          cache-version: 1\n\n      - name: Install TinyTeX\n        run: |\n          Rscript -e 'tinytex::install_tinytex(force = TRUE)'\n          echo \"PATH=$HOME/.TinyTeX/bin/x86_64-linux:$PATH\" &gt;&gt; $GITHUB_ENV\n\n      - name: Ensure TinyTeX Path\n        run: echo \"$HOME/.TinyTeX/bin/x86_64-linux\" &gt;&gt; $GITHUB_PATH\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\ncall renv::snapshot(), snapshot() updates the lockfile with metadata about the currently-used packages in the project library.\n\nThis quarto-publish.yml I have worked on standardising across the projects I’ve developed for the Data Fellows so far - should you have any issues please reach out to Hayley to help troubleshoot!\nOther options for publishing content can be found here: https://quarto.org/docs/publishing/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-6-push-updates-to-github",
    "href": "building-from-scratch.html#step-6-push-updates-to-github",
    "title": "1  Building From Scratch",
    "section": "1.6 Step 6 Push updates to GitHub",
    "text": "1.6 Step 6 Push updates to GitHub\nWe can now push the all of the following changes to GitHub and test if the publishing action has worked - don’t worry that we haven’t changed any content yet we will get there!\nSwitch to the Terminal pane and run the following:\ngit add . \ngit commit -m \"deploying and testing github actions and publishing\"  \ngit push",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-7-check-build-and-status",
    "href": "building-from-scratch.html#step-7-check-build-and-status",
    "title": "1  Building From Scratch",
    "section": "1.7 Step 7 Check build and status",
    "text": "1.7 Step 7 Check build and status\nHead to the repo and go to the ▶️ Actions Tab - we’re hoping to see something like this:\n\nWhich shows us out Build action was completed, worked correctly and the website page should be rendered! 🙂🎉\nIf you head back to the &lt;&gt;code tab and click the link we activated in the About section this should open up our github pages site and will hopefully currently be populated with Quartos book template!\nIf the build action failed we will see somthing like this:\n\nIf we click into this GitHub will give us a good indication of what exactly failed:\n\nThe error here is caused by incorrect indentation in the YAML file. YAML is strict about indentation, and in this instance the curhttps://quarto.org/docs/guide/rent _quarto.yml file, the chapters: key was incorrectly indented. We can correct this, commit and push the changes and our site was deployed correctly!\nOften build errors are informative and can be fixed easily enough - if you’re struggling reach out to Hayley and we can always trouble shoot together!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#step-8-adding-content",
    "href": "building-from-scratch.html#step-8-adding-content",
    "title": "1  Building From Scratch",
    "section": "1.8 Step 8 Adding content",
    "text": "1.8 Step 8 Adding content\nNow we have all the set up out the way we can start adding our content and updating the themeing!\nThis step will be very context depenent on the type of materials we want to add to our modules so I have outlined some common steps across materials that have been built so far and we can always add more as we go.\nThe Quarto Guide is going to be super useful https://quarto.org/docs/guide/ especially if you’re new to working in Markdown - I won’t replicate the resources here and recommend using the Quarto guide as a reference point when writing in Quarto.\nThere is always the option in Quarto to use the visual editor - this simplifies the process of writing and formatting content in markdown formats and allows users to focus on writing without needing to remember markdown syntax, making it easier for beginners and those unfamiliar with code-based formatting. The Visual Editor provides an interface similar to popular word processors like Microsoft Word or Google Docs.\nThe Visual Editor includes toolbars with buttons for common formatting options such as:\n\nBold and italic text\nCreating headings and subheadings\nAdding bullet points or numbered lists\nInserting links, images, and tables\nAdding callouts for notes, warnings, or tips\nYou can still insert and edit code chunks directly in the Visual Editor. These code chunks are executed as usual, and their outputs (tables, figures, etc.) are displayed inline, making it easier to integrate code into your documents.\n\nTo use the Visual Editor in RStudio or other supported IDEs:\n\nOpen any Quarto (.qmd) or markdown file in your project.\nClick the “Visual” button in the top right corner of the editor pane to toggle between the standard markdown editor and the Visual Editor.\n\n\n1.8.1 Understanding the _quarto.yml file\nThe _quarto.yml file is a configuration file that controls the structure and appearance of your Quarto project, such as the website’s title, menu, and theme.\nFor a Quarto book, the _quarto.yml file specifies the structure, appearance, and behavior of the book. Below is an example of what the structure might look like and what you will see when you open this initially in your project.\n\nproject:\n  type: book\n\nbook:\n  title: \"My Quarto Book\"\n  author: \"Author Name\"\n  chapters:\n    - index.qmd\n    - introduction.qmd\n    - chapter1.qmd\n    - chapter2.qmd\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    number-sections: true\n    css: styles.css\nWe want to start by modifying the title and author fields under book to what is relevant for the module (we can just delete the author line as it’s not needed here)\nWe can also add a subtitle that’s nice to include in all our topics like this:\nbook:\n  title: Foundational Malaria Knowledge\n  subtitle: MACEPA Data Fellowship - Training Materials\nThe chapters section defines the order of the chapters in your book. It links to the .qmd files that will become the different sections of the book:\nbook:\n    chapters:\n        - index.qmd           # Main page or introduction\n        - introduction.qmd    # First chapter\n        - chapter1.qmd        # Subsequent chapters\n        - chapter2.qmd\nYou can add or remove chapter files as needed. Just make sure each file you list here exists in the project.\nFor some of our modules we have several topics within a module and sub topics within them so we can use the part as well as chapters to achieve something like this:\n\nTo do so you can set the _quarto.yml to something this:\n  chapters:\n  - index.qmd\n  - part: topic1-intro.qmd\n        chapters:\n        - topic1a-history-malaria.qmd\n        - topic1b-global-impact.qmd\n        - topic1c-endemicity.qmd\n  - part: topic2-intro.qmd\n        chapters: \n        - topic2a-plasmodium-spp.qmd\n        - topic2b-lifecycle.qmd\n        - topic2c-immunity.qmd \n   - part: topic3-intro.qmd\n        chapters: \n        - topic3a-anopheles-trans.qmd\n        - topic3b-environment.qmd\n        - topic3c-human-behaviour.qmd\n        \nIn each of these instances the title that is in the .qmd file becomes the heading that is shown on the final website as shown in the image above.\n\n\n\n\n\n\nNote\n\n\n\nOnce you start adding .qmd files with module content make sure to replace the defualt files and include these in the _quarto.yml to ensure the modules are displayed on the site. Often I start adding content to the templates and renaming the files before creating new .qmd files\n\n\n\n\n1.8.2 Adding custom styling\nWe’ve already created custom PATH theming and I’ve saved all the necessary files in the data-fellows box folder under ‘quarto-theming’ Data fellowship program planning → Technical Content Organization → quarto-theming\nCopy all of these into your root folder and add the following to your _quarto.yml file\nformat:\n  html:\n    theme:\n    - cosmo\n    - custom.scss\n    template-partials: title-block.html\n    css: include/webex.css\n    include-after-body: include/webex.js\n    embed-resources: true \n  pdf:\n    documentclass: scrreprt\neditor: visual\n\n\n1.8.3 Embedding PDFs\nIf you have a slide deck to host on the website we first need to save this as a pdf and ensure it it then saved in the same root directory of our Quarto project.\nYou can use the following syntax to embed the pdfs inside a .qmd file replacing the file name with the associated file name of your file.\n&lt;iframe src=\"file-name.pdf\" width=\"800\" height=\"600\"&gt;\n\n&lt;/iframe&gt; \n\n\n1.8.4 Embedding YouTube Videos\nIf you want to include videos hosted on YouTube an easy was to achieve this is with the following syntax, replacing the link with that to the video of interest:\n\n\n\n1.8.5 Interative Quizzes\nYou can use the webexercises package to produce quizes and is what I used in the Foundational Epi module\nThe documentation is a good place to start here and the source code in the Foundational Epi Module repository if you want to develop something similar!\n\n\n1.8.6 Publishing content\nOnce you have created the necessary module content in .qmd files, have updated the _quarto.yml file with the correct references for each chapter we can again push out changes to github and check out our newly published site!\nRemeber:\n\ngit add . \ngit commit -m \"commit message\" \ngit push \nAnd it’s as simple as that!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-scratch.html#wrapping-it-all-together-maintaining-your-quarto-project",
    "href": "building-from-scratch.html#wrapping-it-all-together-maintaining-your-quarto-project",
    "title": "1  Building From Scratch",
    "section": "1.9 Wrapping It All Together: Maintaining Your Quarto Project",
    "text": "1.9 Wrapping It All Together: Maintaining Your Quarto Project\nBy following these steps, you’ve built a robust workflow for creating, managing, and publishing your Quarto Book from scratch. Here are a few final tips to help you maintain and expand your project effectively:\n\nIterating on Content Content updates:\n\nAs your project evolves, you’ll likely need to update chapters or add new ones. Remember, every time you modify a .qmd file or create a new one, ensure that the _quarto.yml file is updated accordingly. Push these changes to GitHub to automatically deploy updates.\nVersion control: Keep track of your content changes by writing clear commit messages. This makes it easy to refer back to previous versions if needed.\n\nTroubleshooting Common Issues:\n\nBuild failures: Sometimes, your GitHub Actions may fail due to misconfigurations or syntax errors (e.g., in the _quarto.yml file). GitHub provides detailed logs for failed builds in the Actions tab, which can help pinpoint the issue.\nRendering issues: If the published site doesn’t display content as expected, double-check that your .qmd files are properly linked in the _quarto.yml file and that all references (images, links, etc.) are correctly specified.\n\nCollaboration and Feedback Collaborative development:\n\nIf you’re working with a team on the resources, consider using GitHub’s collaborative features like Pull Requests to review changes before they’re merged into the main branch. This can help catch errors early and maintain consistency across the project.\n\nEnsure that your project dependencies (tracked by renv.lock) are up to date by regularly running renv::snapshot() after installing new R packages. This ensures that your environment remains consistent across different systems.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Building From Scratch</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html",
    "href": "building-from-existing.html",
    "title": "2  Building from an existing GitHub Repository",
    "section": "",
    "text": "2.1 Step 1: Clone the Existing GitHub Repository\nThe first step to collaborating is to clone the GitHub repository to your local machine. This creates a copy of the project on your computer, allowing you to work with the files locally.\nThis will create a local copy of the repository that you can work on. You’ll see the project files in the RStudio Files pane.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-1-clone-the-existing-github-repository",
    "href": "building-from-existing.html#step-1-clone-the-existing-github-repository",
    "title": "2  Building from an existing GitHub Repository",
    "section": "",
    "text": "Locate the repository: Visit the GitHub page for the repository you wish to work on. You should see a green Code button on the repository’s main page.\nCopy the repository URL: Click the Code button and copy the HTTPS URL. For example if you wanted to clone and work on this module:\n\nhttps://github.com/PATH-Global-Health/quarto-module-dev.git\n\nClone the repository in RStudio\n\nOpen RStudio.\nGo to File → New Project → Version Control → Git.\nPaste the repository URL you copied earlier into the dialog box.\nChoose where to store the project locally on your computer.\nClick Create Project.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-2-familiarize-yourself-with-the-project",
    "href": "building-from-existing.html#step-2-familiarize-yourself-with-the-project",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.2 Step 2: Familiarize YourSelf with the Project",
    "text": "2.2 Step 2: Familiarize YourSelf with the Project\nBefore making any changes, it’s important to understand the structure of the project and its current status.\n\nExplore the _quarto.yml file: This file defines the structure of the Quarto book (or website) and the order of chapters. Take a look to understand how the chapters are organized.\nReview existing content: Open and read through some of the .qmd files (Quarto markdown) to get a sense of the writing style, structure, and the materials that have already been added.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-3-set-up-your-local-environment",
    "href": "building-from-existing.html#step-3-set-up-your-local-environment",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.3 Step 3: Set up Your Local Environment",
    "text": "2.3 Step 3: Set up Your Local Environment\nTo work on this project, you may need to install the same R packages that the project uses. This is often managed through renv.\n\nActivate renv: If the project is using renv, you will see an renv.lock file in the repository. To install the necessary packages, run the following command in the RStudio console renv::restore() This will install all the packages listed in the renv.lock file, ensuring your environment matches the one used by others working on the project.\nIf additional software is needed (like TinyTeX for PDF output) install these.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-4-make-changes",
    "href": "building-from-existing.html#step-4-make-changes",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.4 Step 4 Make Changes",
    "text": "2.4 Step 4 Make Changes\nNow that your environment is set up, you can start working on the project. Whether you’re fixing a bug, adding content, or improving the formatting, here’s how you can proceed:\n\nIf you are going to be the sole user of the repository now you don’t need to create a new branch - you can skip the next two steps.\nCreate a new branch: It’s good practice to create a new branch for your changes so that you don’t modify the main branch directly. To create a branch, run the following command in the Terminal tab in RStudio:\n\ngit checkout -b new-feature-branch\nReplace new-feature-branch with a name that describes the changes you are making or perhaps your name for example.\n\nEdit or add files: Make your changes to the .qmd files or other assets in the repository. For example, you might want to add a new chapter or modify existing content. As you edit files, save your changes in RStudio.\n\nThis step will be very context depenent on the type of materials we want to add to our modules so I have outlined some common steps across materials that have been built so far.\nThe Quarto Guide is going to be super useful https://quarto.org/docs/guide/ especially if you’re new to working in Markdown - I won’t replicate the resources here and recommend using the Quarto guide as a reference point when writing in Quarto.\nThere is always the option in Quarto to use the visual editor - this simplifies the process of writing and formatting content in markdown formats and allows users to focus on writing without needing to remember markdown syntax, making it easier for beginners and those unfamiliar with code-based formatting. The Visual Editor provides an interface similar to popular word processors like Microsoft Word or Google Docs.\nThe Visual Editor includes toolbars with buttons for common formatting options such as:\n\nBold and italic text\nCreating headings and subheadings\nAdding bullet points or numbered lists\nInserting links, images, and tables\nAdding callouts for notes, warnings, or tips\nYou can still insert and edit code chunks directly in the Visual Editor. These code chunks are executed as usual, and their outputs (tables, figures, etc.) are displayed inline, making it easier to integrate code into your documents.\n\nTo use the Visual Editor in RStudio or other supported IDEs:\n\nOpen any Quarto (.qmd) or markdown file in your project.\nClick the “Visual” button in the top right corner of the editor pane to toggle between the standard markdown editor and the Visual Editor.\n\n\n2.4.1 Understanding the _quarto.yml file\nThe _quarto.yml file is a configuration file that controls the structure and appearance of your Quarto project, such as the website’s title, menu, and theme.\nFor a Quarto book, the _quarto.yml file specifies the structure, appearance, and behavior of the book. Below is an example of what the structure might look like and what you will see when you open this initially in your project.\n\nproject:\n  type: book\n\nbook:\n  title: \"My Quarto Book\"\n  author: \"Author Name\"\n  chapters:\n    - index.qmd\n    - introduction.qmd\n    - chapter1.qmd\n    - chapter2.qmd\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    number-sections: true\n    css: styles.css\nWe want to start by modifying the title and author fields under book to what is relevant for the module (we can just delete the author line as it’s not needed here)\nWe can also add a subtitle that’s nice to include in all our topics like this:\nbook:\n  title: Foundational Malaria Knowledge\n  subtitle: MACEPA Data Fellowship - Training Materials\nThe chapters section defines the order of the chapters in your book. It links to the .qmd files that will become the different sections of the book:\nbook:\n    chapters:\n        - index.qmd           # Main page or introduction\n        - introduction.qmd    # First chapter\n        - chapter1.qmd        # Subsequent chapters\n        - chapter2.qmd\nYou can add or remove chapter files as needed. Just make sure each file you list here exists in the project.\nFor some of our modules we have several topics within a module and sub topics within them so we can use the part as well as chapters to achieve something like this:\n\nTo do so you can set the _quarto.yml to something this:\n  chapters:\n  - index.qmd\n  - part: topic1-intro.qmd\n        chapters:\n        - topic1a-history-malaria.qmd\n        - topic1b-global-impact.qmd\n        - topic1c-endemicity.qmd\n  - part: topic2-intro.qmd\n        chapters: \n        - topic2a-plasmodium-spp.qmd\n        - topic2b-lifecycle.qmd\n        - topic2c-immunity.qmd \n   - part: topic3-intro.qmd\n        chapters: \n        - topic3a-anopheles-trans.qmd\n        - topic3b-environment.qmd\n        - topic3c-human-behaviour.qmd\n        \nIn each of these instances the title that is in the .qmd file becomes the heading that is shown on the final website as shown in the image above.\n\n\n\n\n\n\nNote\n\n\n\nOnce you start adding .qmd files with module content make sure to replace the defualt files and include these in the _quarto.yml to ensure the modules are displayed on the site. Often I start adding content to the templates and renaming the files before creating new .qmd files\n\n\n\n\n2.4.2 Adding custom styling\nWe’ve already created custom PATH theming and I’ve saved all the necessary files in the data-fellows box folder under ‘quarto-theming’ Data fellowship program planning → Technical Content Organization → quarto-theming\nCopy all of these into your root folder and add the following to your _quarto.yml file\nformat:\n  html:\n    theme:\n    - cosmo\n    - custom.scss\n    template-partials: title-block.html\n    css: include/webex.css\n    include-after-body: include/webex.js\n    embed-resources: true \n  pdf:\n    documentclass: scrreprt\neditor: visual\n\n\n2.4.3 Embedding PDFs\nIf you have a slide deck to host on the website we first need to save this as a pdf and ensure it it then saved in the same root directory of our Quarto project.\nYou can use the following syntax to embed the pdfs inside a .qmd file replacing the file name with the associated file name of your file.\n&lt;iframe src=\"file-name.pdf\" width=\"800\" height=\"600\"&gt;\n\n&lt;/iframe&gt; \n\n\n2.4.4 Embedding YouTube Videos\nIf you want to include videos hosted on YouTube an easy was to achieve this is with the following syntax, replacing the link with that to the video of interest:\n\n\n\n2.4.5 Interative Quizzes\nYou can use the webexercises package to produce quizes and is what I used in the Foundational Epi module\nThe documentation is a good place to start here and the source code in the Foundational Epi Module repository if you want to develop something similar!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-5-commit-and-push-your-changes---main-branch",
    "href": "building-from-existing.html#step-5-commit-and-push-your-changes---main-branch",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.5 Step 5: Commit and Push your Changes - main branch",
    "text": "2.5 Step 5: Commit and Push your Changes - main branch\nIf your workflow involves making changes directly to the main branch, follow these steps to commit and push your changes.\n\nStage your changes: First, you need to add the modified files to the staging area. To see which files have been modified, run:\n\n    git status\nThis command will list the files that have been added, changed, or deleted. Once you’re ready to stage them, run:\n    git add .\nThe . adds all the changed files to the staging area. You can also stage individual files by replacing . with the filename.\n\nCommit your changes: After staging your files, you’ll need to commit them to the repository with a descriptive message that explains the changes you made. Run the following command:\n\ngit commit -m \"Your descriptive commit message here\"\nMake sure the commit message clearly states what changes you’ve made\n\nPush your changes: Once you’ve committed your changes, push them to the main branch on GitHub by running:\n\n    git push origin main\nThis command will send your local changes to the main branch of the remote GitHub repository. After pushing, your changes will immediately be reflected in the repository and if a [GitHub Action]Section 1.5 to publish has been set up this will automatically be reflected in the online site.\n\n\n\n\n\n\nImportant Notes:\n\n\n\n\nWorking on the main branch: When working directly on the main branch, it’s important to ensure that your changes won’t disrupt the main project. This workflow is typically used for smaller updates or when a project does not follow a branch-based development model.\nKeep the main branch up to date: Before making any changes, ensure your local copy of the main branch is up to date by running: git pull origin main\nCollaboration caution: If other team members are working on the same repository, communicate to avoid conflicts. Making significant changes directly on the main branch could cause merge conflicts if others are working simultaneously.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-5-commit-and-push-your-changes---new-branch",
    "href": "building-from-existing.html#step-5-commit-and-push-your-changes---new-branch",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.6 Step 5: Commit and Push Your Changes - new branch",
    "text": "2.6 Step 5: Commit and Push Your Changes - new branch\nOnce you’re happy with your changes, it’s time to commit and push them back to GitHub.\n\nStage your changes: In the Terminal, check which files have been modified: git status\nAdd the changes to staging: If the output looks correct, add your changes to the staging area git add .\nCommit your changes: Write a meaningful commit message describing what you’ve changed: git commit -m \"Added a new chapter on…\"\nPush your changes: Push your branch to GitHub git push origin new-feature-branch (change the name to the branch name you are working on)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-6-create-a-pull-request",
    "href": "building-from-existing.html#step-6-create-a-pull-request",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.7 Step 6: Create a Pull Request",
    "text": "2.7 Step 6: Create a Pull Request\nNow that your changes are on GitHub, you need to create a Pull Request (PR) so that the repository maintainers can review and merge your work into the main branch.\n\nNavigate to the repository on GitHub: Once there, GitHub will automatically suggest that you create a pull request for your new branch.\nOpen the Pull Request: Click the Compare & pull request button. In the PR description, explain what changes you’ve made and why.\nSubmit the Pull Request: Click Create pull request.\nOnce the PR is approved, it can be merged into the main branch by a maintainer.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  },
  {
    "objectID": "building-from-existing.html#step-7-keeping-your-fork-or-local-repository-up-to-date",
    "href": "building-from-existing.html#step-7-keeping-your-fork-or-local-repository-up-to-date",
    "title": "2  Building from an existing GitHub Repository",
    "section": "2.8 Step 7: Keeping Your Fork or Local Repository Up-to-Date",
    "text": "2.8 Step 7: Keeping Your Fork or Local Repository Up-to-Date\nIf you are working on a forked repository or need to sync your local repository with the main branch, follow these steps:\n\nPull changes from the main repository: Run the following commands to fetch and merge changes from the upstream (original) repository:\n\ngit fetch origin \ngit pull origin main \n\nResolve any conflicts: If there are any merge conflicts, RStudio will show you the conflicting files, and you can resolve them before pushing the changes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Building from an existing GitHub Repository</span>"
    ]
  }
]